import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns

suicide=pd.read_csv("master.csv") 
suicide.drop('HDI for year', axis=1, inplace = True) #Drop missing data 
suicide=suicide[(suicide['year']>=2000) & (suicide['year']<2016)]

# not including 2016 because it has a lot of missing data
# Plot to see trending of suicide 
ax = plt.subplots(1,1,figsize=(10,8)) 
ax = sns.lineplot(x="year", y="suicides_no", hue="age", data=suicide,ci=None)
plt.title('Total No. of Suicides per Year: 2000 To 2015', fontsize = 22) 
plt.ylabel('No. Suicides in Thousand', fontsize = 20)
plt.xlabel('Year', fontsize = 20)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()


# Happiness df merge with suicide df
happiness=pd.read_csv("2015.csv").dropna()
df2=happiness.sort_values(by='Happiness Score',ascending=False)
#join combined and suicide tables
new=df2.merge(suicide, left_on='Country', right_on='country')

#find overall correlation 
#create dataframe of correlation for each Continent 
index = happiness["Region"].unique()
col_names = ['suicide_GDP_correlation','suicide_happiness_correlation'] 
df1=pd.DataFrame(index = index, columns = col_names)
for i in index:    
    df3 = new[new['Region']==i]    
    corr=df3['gdp_per_capita ($)'].corr(df3['suicides/100k pop'])
    corr1=df3['Happiness Score'].corr(df3['suicides/100k pop'])
    df1['suicide_GDP_correlation'][i]=corr
    df1['suicide_happiness_correlation'][i]=corr1

    
# plot correlation 
df1.plot(kind='bar', fontsize=14)
plt.title('Correlations', fontsize = 15) 
ax.set_xlabel("Region", fontsize=10) 
ax.set_ylabel("correlation", fontsize=10) 
plt.show()


ax1 = plt.subplots(1,1,figsize=(10,8)) 
ax1 = sns.barplot(x="Region", y="suicides/100k pop", color="grey", data=new,ci=None)
plt.title('Suicides Rate per Region', fontsize = 22) 
plt.ylabel('Suicides Rate per 100K population', fontsize = 20)
plt.xlabel('Region', fontsize = 20)
plt.xticks(rotation=90)
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()


# User gives country name-> generate the group with highest suicide rate in that country 
#inputCountry = input("Please input the country name:")
try:
    inputCountry = input('Please input the country name: ')
    dfSelect = new[new["Country"] == inputCountry].sort_values(by='suicides/100k pop',ascending=False)
    dfSelectMax=dfSelect.nlargest(1, "suicides/100k pop").iloc[0]
    age = dfSelectMax["age"]
    gender = dfSelectMax["sex"]  
    print('In', inputCountry, ", the group with highest suicide rate is: ", age, gender)
    recom= ''    
    for i in new:    
        df3 = new[new['Country']==inputCountry]    
        corr=df3['gdp_per_capita ($)'].corr(df3['suicides/100k pop'])
        corr1=df3['Happiness Score'].corr(df3['suicides/100k pop'])
        if corr >corr1:
            recom = 'We would recommend government focus on imrpoving economic'
        elif corr == 'NaN' or corr1 =='NaN':
            recom = 'Suicide data not reported, we would recommend government collect data for further analysis'
        else:
            recom = 'We would recommend government focus on imrpoving happiness'
    print(recom)
    
    eco=new['Economy (GDP per Capita)'].mean()
    family=new['Family'].mean()
    health=new['Health (Life Expectancy)'].mean()
    free=new['Freedom'].mean()
    trust=new['Trust (Government Corruption)'].mean()
    gen=new['Generosity'].mean()
    dys=new['Dystopia Residual'].mean()
    
    impro=[]
    if recom == 'We would recommend government focus on imrpoving happiness':
        if eco>dfSelectMax['Economy (GDP per Capita)']:
            impro.append('Economy (GDP per Capita)')
        if family>dfSelectMax['Family']:
            impro.append('Family')
        if health>dfSelectMax['Health (Life Expectancy)']:
            impro.append('Health (Life Expectancy)')
        if free>dfSelectMax['Freedom']:
            impro.append('Freedom')
        if trust>dfSelectMax['Trust (Government Corruption)']:
            impro.append('Trust (Government Corruption)')
        if gen>dfSelectMax['Generosity']:
            impro.append('Generosity')
        if dys>dfSelectMax['Dystopia Residual']:
            impro.append('Dystopia Residual')
    for i in impro:
        print('Happiness factor of', i, 'is below world average, could be improved ')
except Exception:
    print('Suicide data not reported, we would recommend government to collect data for futher analysis')
